--опнжедспю цемепюжхх дюммшу
CREATE PROCEDURE PRACTICE.DATA_GENERATION
AS
BEGIN
DECLARE @ZHURNAL_ID INT
INSERT INTO PRACTICE.ZHURNAL SELECT  GETDATE()

SELECT @ZHURNAL_ID = MAX(ID)FROM PRACTICE.ZHURNAL

IF OBJECT_ID('TEMPDB..#TOP100') IS NOT NULL
	DROP TABLE #TOP100;

WITH CTE AS
(SELECT 1 A UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9 UNION ALL SELECT 10 UNION ALL SELECT 0)

SELECT TOP 100 ROW_NUMBER() OVER(ORDER BY L1.A) RN
INTO #TOP100
FROM CTE L1
CROSS JOIN CTE L2 
CROSS JOIN CTE L3


IF OBJECT_ID('TEMPDB..#DATA') IS NOT NULL
	DROP TABLE #DATA;


SELECT RN AS SESSION_ID
	, ABS(CONVERT(INT, (CONVERT(BINARY(6), (NEWID())))))%100000  AS LOGICAL_READS
	, ABS(CONVERT(INT, (CONVERT(BINARY(6), (NEWID())))))%10000 AS CPU_USAGE
	, LEFT(CAST(NEWID() AS VARCHAR(100)), 8) AS LOGIN_NAME
	, ABS(CONVERT(INT, (CONVERT(BINARY(6), (NEWID())))))%100 AS TIME_IN_OPERATION_IN_MINUTES
	, ABS(CONVERT(INT, (CONVERT(BINARY(6), (NEWID())))))%10000 AS RAM_USAGE
INTO #DATA
FROM #TOP100;

--оепбхвмне гюонкмемхе онкэгнбюрекеи бннаые онкэгнбюрекх бяецдю асдср онъбкърэяъ мнбше, мюдн ху цде-рн днаюбкърэ б щрс рюакхжс.
IF (SELECT COUNT(*) FROM PRACTICE.DIC_LOGINS) = 0
	INSERT INTO PRACTICE.DIC_LOGINS
	SELECT DISTINCT LOGIN_NAME FROM #DATA

--хгмювюкэмн бяе LOGIN_NAME б DATA смхйюкэмше, гюлемхл вюярэ мю сфе ясыеярбсчыху онкэгнбюрекеи (дн 90% асдср хг сфе ясыеярбсчыху)
UPDATE D
	SET D.LOGIN_NAME = ISNULL(L.LOGIN_NAME, D.LOGIN_NAME)
FROM #DATA D
LEFT JOIN (	
				SELECT SESSION_ID, MAX(LOGIN_NAME) AS LOGIN_NAME
				FROM
				(
					SELECT LOGIN_NAME, ABS(CONVERT(INT, (CONVERT(BINARY(4), (NEWID()))))) % 100 AS SESSION_ID
					FROM PRACTICE.DIC_LOGINS 
				) TAB
				GROUP BY SESSION_ID
		   ) L ON L.SESSION_ID = D.SESSION_ID 
		   --днаюбхк врнаш б йнмже йнмжнб онъбкъкяъ 10нй мнбшу кнцхмнб йюфдши пюг
			AND D.SESSION_ID%100 <> 3


IF OBJECT_ID('TEMPDB..#BLOCKING') IS NOT NULL
	DROP TABLE #BLOCKING

SELECT TAB.SESSION_ID, TAB.BLOCKING_SESSION_ID
INTO #BLOCKING
FROM
(
	SELECT TOP 20 
	  ABS(CONVERT(INT, (CONVERT(BINARY(4), (NEWID()))))) % 100 +1 AS SESSION_ID,
	  ABS(CONVERT(INT, (CONVERT(BINARY(4), (NEWID()))))) % 100 +1 AS BLOCKING_SESSION_ID
	FROM #DATA
) TAB

--сдюкъч ябъгюммнярэ (ндмю х рюфе яеяяхъ ме лнфер ашрэ йюй гюакнйхпнбюммни рюй х акнйхпнбюрэ йнцн-рн ндмнбпелеммн)
--ядекюмн дкъ сопныемхъ
DELETE TAB 
FROM #BLOCKING TAB
	LEFT JOIN #DATA D ON D.SESSION_ID = TAB.SESSION_ID
	LEFT JOIN #DATA D2 ON D2.SESSION_ID = TAB.BLOCKING_SESSION_ID
	LEFT JOIN #BLOCKING B2 ON B2.BLOCKING_SESSION_ID = TAB.SESSION_ID
WHERE D.SESSION_ID IS NULL OR D2.SESSION_ID IS NULL
	OR TAB.SESSION_ID = TAB.BLOCKING_SESSION_ID
	OR B2.SESSION_ID IS NOT NULL

--гюонкмемхе рюакхжш BLOCKING
INSERT INTO BLOCKING(SESSION_ID,BLOCKING_SESSION_ID,ZHURNAL_ID)
SELECT SESSION_ID, BLOCKING_SESSION_ID, @ZHURNAL_ID FROM #BLOCKING

--гюонкмемхе рюакхжш DIC_LOGINS
INSERT INTO PRACTICE.DIC_LOGINS(LOGIN_NAME)
SELECT A.LOGIN_NAME FROM #DATA A LEFT JOIN PRACTICE.DIC_LOGINS B ON B.LOGIN_NAME = A.LOGIN_NAME
WHERE B.LOGIN_NAME IS NULL

--гюонкмемхе рюакхжш INFORMATION
INSERT INTO PRACTICE.INFORMATION(SESSION_ID,LOGICAL_READS,CPU_USAGE,LOGIN_ID,TIME_IN_OPERATION_IN_MINUTES,ZHURNAL_ID,RAM_USAGE)
SELECT D.SESSION_ID, D.LOGICAL_READS, D.CPU_USAGE, DIC_LOGINS.ID,D.TIME_IN_OPERATION_IN_MINUTES,@ZHURNAL_ID,RAM_USAGE FROM #DATA D JOIN PRACTICE.DIC_LOGINS ON DIC_LOGINS.LOGIN_NAME = D.LOGIN_NAME
END
