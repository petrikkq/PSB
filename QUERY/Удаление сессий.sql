--сдюкемхе яеяяхи
USE UTMP
ALTER PROCEDURE PRACTICE.DELETE_SESSION3
@ZHURNAL_ID INT
AS
BEGIN
--сдюкемхе яеяяхи(еякх акнйхпсер йнцн-рн бюфмее яеаъ)
	IF OBJECT_ID('TEMPDB..#REZULT') IS NOT NULL
		DROP TABLE #REZULT
--онхяй онкэгнбюрекеи, йнрнпше акнйхпсчр опхнпхрермшу онкэгнбюрекеи
	SELECT A.BLOCKING_SESSION_ID AS BLOCK_SESSION,B.LOGIN_ID AS BLOCK_LOGIN_ID, D.EXCEPTION_TYPE AS EXCEPTION_TYPE1,D.PRIORITY1 AS PRIORITY1, A.SESSION_ID AS SESSION_ID,
	T.LOGIN_ID AS LOGIN2, R.EXCEPTION_TYPE AS EXCEPTION_TYPE2, R.PRIORITY1 AS PRIORITY2,E.ID AS ZHURNAL_ID
	INTO #REZULT
	FROM PRACTICE.BLOCKING A
	JOIN PRACTICE.INFORMATION B ON A.BLOCKING_SESSION_ID = B.SESSION_ID
	LEFT JOIN PRACTICE.EXCEPTION D ON D.LOGIN_ID = B.LOGIN_ID AND CASE 
																		WHEN D.EXCEPTION_TYPE = 'EXCLUSIVE' THEN 1 
																		WHEN D.EXCEPTION_TYPE = 'DATE' AND GETDATE() BETWEEN D.DATE_FROM AND D.DATE_TO THEN 1
																		WHEN D.EXCEPTION_TYPE = 'TIME' AND CONVERT (TIME, CURRENT_TIMESTAMP) BETWEEN D.TIME_FROM AND D.TIME_TO THEN 1
																  END = 1
	JOIN PRACTICE.ZHURNAL E ON E.ID = A.ZHURNAL_ID AND B.ZHURNAL_ID = E.ID
	JOIN PRACTICE.INFORMATION T ON T.SESSION_ID = A.SESSION_ID AND T.ZHURNAL_ID = E.ID
	LEFT JOIN PRACTICE.EXCEPTION R ON R.LOGIN_ID = T.LOGIN_ID AND CASE
																		WHEN R.EXCEPTION_TYPE = 'EXCLUSIVE' THEN 1 
																		WHEN R.EXCEPTION_TYPE = 'DATE' AND GETDATE() BETWEEN R.DATE_FROM AND R.DATE_TO THEN 1
																		WHEN R.EXCEPTION_TYPE = 'TIME' AND CONVERT (TIME, CURRENT_TIMESTAMP) BETWEEN R.TIME_FROM AND R.TIME_TO THEN 1 
																  END = 1
	WHERE (R.EXCEPTION_TYPE IS NOT NULL AND D.EXCEPTION_TYPE IS NOT NULL) AND E.ID = @ZHURNAL_ID AND D.PRIORITY1 > R.PRIORITY1 
	
	DELETE B
	FROM PRACTICE.DELETED_SESSIONS B JOIN #REZULT A ON A.BLOCK_SESSION = B.BLOCK_SESSION AND A.SESSION_ID = B.SESSION_ID AND A.EXCEPTION_TYPE1 = B.EXCEPTION_TYPE1
	WHERE B.ZHURNAL_ID = @ZHURNAL_ID
--днаюбкемхе дюммшу б рюакхжс DELETED_SESSIONS
	INSERT INTO PRACTICE.DELETED_SESSIONS( BLOCK_SESSION , BLOCK_LOGIN_ID,  EXCEPTION_TYPE1,PRIORITY1, SESSION_ID ,LOGIN2, EXCEPTION_TYPE2,PRIORITY2,ZHURNAL_ID,ACTION1)
	SELECT T.BLOCK_SESSION, T.BLOCK_LOGIN_ID,  T.EXCEPTION_TYPE1,T.PRIORITY1, T.SESSION_ID ,T.LOGIN2, T.EXCEPTION_TYPE2,T.PRIORITY2,T.ZHURNAL_ID,'USER акнйхпсер USER`A бюфмее яеаъ' FROM #REZULT T

--сдюкемхе яеяяхи(еякх акнйхпселши еярэ б хяйкчвемхъу, ю акнйхпчыецн - мер)
	IF OBJECT_ID('TEMPDB..#REZULT2') IS NOT NULL
		DROP TABLE #REZULT2
--онхяй акнйхпсчыху онкэгнбюрекеи, мю йнрнпшу мер нцпюмхвемхи
	SELECT A.BLOCKING_SESSION_ID AS BLOCK_SESSION,B.LOGIN_ID AS BLOCK_LOGIN_ID, D.EXCEPTION_TYPE AS EXCEPTION_TYPE1,D.PRIORITY1 AS PRIORITY1, A.SESSION_ID AS SESSION_ID,
	T.LOGIN_ID AS LOGIN2, R.EXCEPTION_TYPE AS EXCEPTION_TYPE2,R.PRIORITY1 AS PRIORITY2,E.ID AS ZHURNAL_ID
	INTO #REZULT2
	FROM PRACTICE.BLOCKING A
	JOIN PRACTICE.INFORMATION B ON A.BLOCKING_SESSION_ID = B.SESSION_ID
	LEFT JOIN PRACTICE.EXCEPTION D ON D.LOGIN_ID = B.LOGIN_ID AND CASE 
																		WHEN D.EXCEPTION_TYPE = 'EXCLUSIVE' THEN 1 
																		WHEN D.EXCEPTION_TYPE = 'DATE' AND GETDATE() BETWEEN D.DATE_FROM AND D.DATE_TO THEN 1
																		WHEN D.EXCEPTION_TYPE = 'TIME' AND CONVERT (TIME, CURRENT_TIMESTAMP) BETWEEN D.TIME_FROM AND D.TIME_TO THEN 1
																	END = 1
	JOIN PRACTICE.ZHURNAL E ON E.ID = A.ZHURNAL_ID AND B.ZHURNAL_ID = E.ID
	JOIN PRACTICE.INFORMATION T ON T.SESSION_ID = A.SESSION_ID AND T.ZHURNAL_ID = E.ID
	LEFT JOIN PRACTICE.EXCEPTION R ON R.LOGIN_ID = T.LOGIN_ID AND CASE
																		WHEN R.EXCEPTION_TYPE = 'EXCLUSIVE' THEN 1 
																		WHEN R.EXCEPTION_TYPE = 'DATE' AND GETDATE() BETWEEN R.DATE_FROM AND R.DATE_TO THEN 1
																		WHEN R.EXCEPTION_TYPE = 'TIME' AND CONVERT (TIME, CURRENT_TIMESTAMP) BETWEEN R.TIME_FROM AND R.TIME_TO THEN 1 
																  END = 1
	WHERE (R.EXCEPTION_TYPE IS NOT NULL AND D.EXCEPTION_TYPE IS NULL) AND E.ID = @ZHURNAL_ID
	
	DELETE B
	FROM PRACTICE.DELETED_SESSIONS B 
	WHERE B.ZHURNAL_ID = @ZHURNAL_ID 
--днаюбкемхе дюммшу б рюакжс DELETED_SESSIONS
	INSERT INTO PRACTICE.DELETED_SESSIONS( BLOCK_SESSION , BLOCK_LOGIN_ID,  EXCEPTION_TYPE1, PRIORITY1, SESSION_ID ,LOGIN2, EXCEPTION_TYPE2,PRIORITY2,ZHURNAL_ID,ACTION1)
	SELECT T.BLOCK_SESSION, T.BLOCK_LOGIN_ID,  T.EXCEPTION_TYPE1,T.PRIORITY1, T.SESSION_ID ,T.LOGIN2, T.EXCEPTION_TYPE2,T.PRIORITY2,T.ZHURNAL_ID,'мер нцпюмхвемхи мю USER`A, акнйхпсчыецн яеяяхч' FROM #REZULT2 T

--сдюкемхе яеяяхи опх анкэьнл ясллюпмнл онрпеакемхх пеяспянб
	IF OBJECT_ID('TEMPDB..#REZULT3') IS NOT NULL
		DROP TABLE #REZULT3

--онхяй яеяххи, йнрнпше онрпеакъчр б яслле анкэье пеяспянб, вел онкнфеммнцн 
	SELECT TAB.LOGIN_ID,TAB.CPU,TAB.LOGICAL_READS,TAB.RAM_USAGE,B.CPU_FOR_ALL_SESSIONS,B.LOGICAL_READS_FOR_ALL_SESSIONS,B.RAM_FOR_ALL_SESSIONS,
	CASE
		WHEN TAB.CPU > B.CPU_FOR_ALL_SESSIONS THEN 'CPU'
		WHEN TAB.LOGICAL_READS > B.LOGICAL_READS_FOR_ALL_SESSIONS THEN 'LOGICAL_READS'
		WHEN TAB.RAM_USAGE > B.RAM_FOR_ALL_SESSIONS THEN 'RAM'
	END CAUSE
	INTO #REZULT3
	FROM
	(
		SELECT A.LOGIN_ID, SUM(A.CPU_USAGE) AS CPU,SUM(A.LOGICAL_READS) AS LOGICAL_READS,SUM(A.RAM_USAGE) AS RAM_USAGE 
		FROM PRACTICE.INFORMATION A
		WHERE A.ZHURNAL_ID = @ZHURNAL_ID AND A.LOGIN_ID NOT IN (SELECT D.LOGIN_ID FROM PRACTICE.INFORMATION C
		LEFT JOIN PRACTICE.EXCEPTION D ON D.LOGIN_ID = C.LOGIN_ID AND CASE 
																			WHEN D.EXCEPTION_TYPE = 'EXCLUSIVE' THEN 1 
																			WHEN D.EXCEPTION_TYPE = 'DATE' AND GETDATE() BETWEEN D.DATE_FROM AND D.DATE_TO THEN 1
																			WHEN D.EXCEPTION_TYPE = 'TIME' AND CONVERT (TIME, CURRENT_TIMESTAMP) BETWEEN D.TIME_FROM AND D.TIME_TO THEN 1
																	  END = 1
		WHERE A.ZHURNAL_ID = D.ZHURNAL_ID)
		GROUP BY A.LOGIN_ID
	) TAB
	INNER JOIN PRACTICE.SETINGS B ON TAB.CPU > B.CPU_FOR_ALL_SESSIONS OR TAB.LOGICAL_READS > B.LOGICAL_READS_FOR_ALL_SESSIONS OR TAB.RAM_USAGE > B.RAM_FOR_ALL_SESSIONS

	IF OBJECT_ID('TEMPDB..#PETR') IS NOT NULL
		DROP TABLE #PETR;

--яеяяхх, ясллю CPU йнрнпшу анкэье, вел онкнфемн
	WITH T1 AS
	(
		SELECT A.SESSION_ID,A.CPU_USAGE, A.LOGIN_ID, A.ZHURNAL_ID, DENSE_RANK() OVER   
		(PARTITION BY A.LOGIN_ID ORDER BY A.CPU_USAGE DESC) AS RANK1 
		FROM PRACTICE.INFORMATION A
		JOIN #REZULT3 B ON A.LOGIN_ID = B.LOGIN_ID 
		WHERE B.CAUSE = 'CPU'
	)
	SELECT SESSION_ID, LOGIN_ID, ZHURNAL_ID  
	INTO #PETR
	FROM T1 WHERE RANK1 = 1

--днаюбкемхе дюммшу б рюакхжс DELETED_SESSIONS
	INSERT INTO PRACTICE.DELETED_SESSIONS(BLOCK_SESSION, BLOCK_LOGIN_ID,ZHURNAL_ID,ACTION1)
	SELECT A.SESSION_ID, A.LOGIN_ID, A.ZHURNAL_ID,'анкэьне ясллюпмне онрпеакемхе CPU' FROM #PETR A

	IF OBJECT_ID('TEMPDB..#PETR1') IS NOT NULL
		DROP TABLE #PETR1;

--яеяяхх, ясллю RAM йнрнпшу анкэье, вел онкнфемн
	WITH T2 AS
	(
		SELECT A.SESSION_ID,A.RAM_USAGE, A.LOGIN_ID, A.ZHURNAL_ID, DENSE_RANK() OVER   
		(PARTITION BY A.LOGIN_ID ORDER BY A.RAM_USAGE DESC) AS RANK2
		FROM PRACTICE.INFORMATION A
		JOIN #REZULT3 B ON A.LOGIN_ID = B.LOGIN_ID 
		WHERE B.CAUSE = 'RAM'
	)
	SELECT SESSION_ID, LOGIN_ID, ZHURNAL_ID 
	INTO #PETR1
	FROM T2 WHERE RANK2 = 1

--днаюбкемхе дюммшу б рюакхжс DELETED_SESSIONS
	INSERT INTO PRACTICE.DELETED_SESSIONS(BLOCK_SESSION, BLOCK_LOGIN_ID,ZHURNAL_ID,ACTION1)
	SELECT A.SESSION_ID, A.LOGIN_ID, A.ZHURNAL_ID,'анкэьне ясллюпмне онрпеакемхе RAM' FROM #PETR1 A

	IF OBJECT_ID('TEMPDB..#PETR2') IS NOT NULL
		DROP TABLE #PETR2;

--яеяяхх, ясллю LOGICAL_READS йнрнпшу анкэье, вел онкнфемн
	WITH T3 AS
	(
		SELECT A.SESSION_ID,A.LOGICAL_READS, A.LOGIN_ID, A.ZHURNAL_ID, DENSE_RANK() OVER   
		(PARTITION BY A.LOGIN_ID ORDER BY A.LOGICAL_READS DESC) AS RANK3 
		FROM PRACTICE.INFORMATION A
		JOIN #REZULT3 B ON A.LOGIN_ID = B.LOGIN_ID 
		WHERE B.CAUSE = 'LOGICAL_READS'
	)
	SELECT SESSION_ID, LOGIN_ID, ZHURNAL_ID 
	INTO #PETR2
	FROM T3 WHERE RANK3 = 1
	
--днаюбкемхе дюммшу б рюакхжс DELETED_SESSIONS
	INSERT INTO PRACTICE.DELETED_SESSIONS(BLOCK_SESSION, BLOCK_LOGIN_ID,ZHURNAL_ID,ACTION1)
	SELECT A.SESSION_ID, A.LOGIN_ID, A.ZHURNAL_ID,'анкэьне ясллюпмне онрпеакемхе LOGICAL_READS' FROM #PETR2 A

--сдюкемхе яеяяхи опх анкэьнл онрпеакемхх пеяспянб
IF OBJECT_ID('TEMPDB..#REZULT4') IS NOT NULL
		DROP TABLE #REZULT4

--онхяй яеяххи, йнрнпше онрпеакъчр б яслле анкэье пеяспянб, вел онкнфеммнцн 
	SELECT TAB.LOGIN_ID,TAB.CPU,TAB.LOGICAL_READS,TAB.RAM_USAGE,B.CPU AS SETTINGS_CPU,B.LOGICAL_READS AS SETTINGS_LOGICAL_READS,B.RAM AS SETTINGS_RAM,
	CASE
		WHEN TAB.CPU > B.CPU THEN 'CPU'
		WHEN TAB.LOGICAL_READS > B.LOGICAL_READS THEN 'LOGICAL_READS'
		WHEN TAB.RAM_USAGE > B.RAM THEN 'RAM'
	END CAUSE
	INTO #REZULT4
	FROM
	(
		SELECT A.LOGIN_ID, A.CPU_USAGE AS CPU,A.LOGICAL_READS AS LOGICAL_READS,A.RAM_USAGE AS RAM_USAGE 
		FROM PRACTICE.INFORMATION A
		WHERE A.ZHURNAL_ID = @ZHURNAL_ID AND A.LOGIN_ID NOT IN (SELECT D.LOGIN_ID FROM PRACTICE.EXCEPTION D WHERE A.ZHURNAL_ID = D.ZHURNAL_ID)
	) TAB
	INNER JOIN PRACTICE.SETINGS B ON TAB.CPU > B.CPU OR TAB.LOGICAL_READS > B.LOGICAL_READS OR TAB.RAM_USAGE > B.RAM

--днаюбкемхе дюммшу б рюакхжс DELETED_SESSIONS
	INSERT INTO PRACTICE.DELETED_SESSIONS(BLOCK_SESSION, BLOCK_LOGIN_ID,ZHURNAL_ID,ACTION1)
	SELECT A.SESSION_ID, A.LOGIN_ID, A.ZHURNAL_ID,'анкэьне онрпеакемхе CPU' FROM #REZULT4 B
	JOIN PRACTICE.INFORMATION A 
	ON A.CPU_USAGE = B.CPU AND A.LOGIN_ID = B.LOGIN_ID AND A.LOGICAL_READS = B.LOGICAL_READS AND A.RAM_USAGE = B.RAM_USAGE WHERE B.CAUSE = 'CPU' 

--днаюбкемхе дюммшу б рюакхжс DELETED_SESSIONS		
	INSERT INTO PRACTICE.DELETED_SESSIONS(BLOCK_SESSION, BLOCK_LOGIN_ID,ZHURNAL_ID,ACTION1)
	SELECT A.SESSION_ID, A.LOGIN_ID, A.ZHURNAL_ID,'анкэьне онрпеакемхе LOGICAL_READS' FROM #REZULT4 B
	JOIN PRACTICE.INFORMATION A 
	ON A.CPU_USAGE = B.CPU AND A.LOGIN_ID = B.LOGIN_ID AND A.LOGICAL_READS = B.LOGICAL_READS AND A.RAM_USAGE = B.RAM_USAGE WHERE B.CAUSE = 'LOGICAL_READS'

--днаюбкемхе дюммшу б рюакхжс DELETED_SESSIONS
	INSERT INTO PRACTICE.DELETED_SESSIONS(BLOCK_SESSION, BLOCK_LOGIN_ID,ZHURNAL_ID,ACTION1)
	SELECT A.SESSION_ID, A.LOGIN_ID, A.ZHURNAL_ID,'анкэьне онрпеакемхе RAM' FROM #REZULT4 B
	JOIN PRACTICE.INFORMATION A 
	ON A.CPU_USAGE = B.CPU AND A.LOGIN_ID = B.LOGIN_ID AND A.LOGICAL_READS = B.LOGICAL_READS AND A.RAM_USAGE = B.RAM_USAGE WHERE B.CAUSE = 'RAM'

	SELECT * FROM PRACTICE.DELETED_SESSIONS
END
